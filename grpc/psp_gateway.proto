/*
 * Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES, ALL RIGHTS RESERVED.
 *
 * This software product is a proprietary product of NVIDIA CORPORATION &
 * AFFILIATES (the "Company") and all right, title, and interest in and to the
 * software product, including all associated intellectual property rights, are
 * and shall remain exclusively with the Company.
 *
 * This software product is governed by the End User License Agreement
 * provided with the software product.
 *
 */

syntax = "proto3";

package psp_gateway;

// General notes:
// - All `request_id` fields are unique per initiating host.
// - All `name` fields are for debug only and should not be
//   depended on except for logging.
// - Success/failure is encoded in the RPC return values, not
//   in response message fields.
//   See: https://grpc.github.io/grpc/core/md_doc_statuscodes.html

message TunnelParameters
{
    string mac_addr = 1;
    string ip_addr = 2;
    uint32 psp_version = 3;
    uint32 spi = 4;
    bytes encryption_key = 5;
    uint64 virt_cookie = 6;
}

message NewTunnelRequest
{
    uint64 request_id = 1; // unique per host
    repeated uint32 psp_versions_accepted = 2; // in decreasing order of preference

    string virt_src_ip = 3;
    string virt_dst_ip = 4;

    TunnelParameters reverse_params = 5; // for traffic coming back to requester
}

message NewTunnelResponse
{
    uint64 request_id = 1;
    TunnelParameters params = 2;
}

message KeyRotationRequest
{
    uint64 request_id = 1; // unique per host
    bool issue_new_keys = 2;
}

message KeyRotationResponse
{
    uint64 request_id = 1;
}

service PSP_Gateway
{
    // Requests that the recipient allocate a new SPI and encryption key
    // so that the initiator can begin sending encrypted traffic.
    rpc RequestTunnelParams(NewTunnelRequest) returns (NewTunnelResponse);

    // Requests that the master key be rotated.
    // All active keys become deprecated but continue to work.
    // All previously deprecated keys are invalidated.
    rpc RequestKeyRotation(KeyRotationRequest) returns (KeyRotationResponse);
}
